用于快速求多项式乘法
复杂度O(nlogn)
必须通过补0使初始多项式项数为2的整数次幂
若相乘则两多项式的项数需扩充至原项数之和

const double pi = acos(-1.0);
// 复数结构体
struct Complex {
    double x,y;
    Complex(double _x = 0.0,double _y = 0.0) {
        x = _x;
        y = _y;
    }
    Complex operator - (const Complex &b)const {
        return Complex(x-b.x,y-b.y);
    }
    Complex operator + (const Complex &b)const {
        return Complex(x+b.x,y+b.y);
    }
    Complex operator * (const Complex &b)const {
        return Complex(x*b.x-y*b.y,x*b.y+y*b.x);
    }
};
/* 进行FFT和IFFT前的反转变化
 * 位置 i 和 (i 二进制反转后位置) 互换
 * len 必须为 2 的整数幂
 */
void change(Complex y[],int len) {
    int i,j,k;
    for(i=1,j=len/2;i<len-1;i++) {
        if(i < j) swap(y[i],y[j]);
        k = len / 2;
        while(j >= k) {
            j -= k;
            k /= 2;
        }
        if(j < k) j += k;
    }
}
/*
 * FFT
 * len必须是2^k形式
 * on = 1是FFT， -1是IFFT
 *FFT将y由系数变为点值，
 *IFFT将y由点值变为系数
 */
void fft(Complex y[],int len,int on) {
    change(y,len);
    for(int h=2;h<=len;h<<=1) {
        Complex wn(cos(-on*2*pi/h),sin(-on*2*pi/h));
        for(int j=0;j<len;j+=h) {
            Complex w(1,0);
            for(int k=j;k<j+h/2;k++) {
                Complex u = y[k];
                Complex t = w*y[k+h/2];
                y[k] =  u+t;
                y[k+h/2] = u-t;
                w = w * wn;
            }
        }
    }
    if(on == -1) 
        for(int i=0;i<len;i++) y[i].x /= len;
}
