1、一个数因子个数 = 分解质因子后各因子幂次加一的乘积
2、两个数乘积的因子个数等于两个数因子个数的乘积
3、求因子个数
一个数有几个因数的模板
 (需要提前筛好数组prime)
int count_factors(int num){
  int ret = 1;
	if (num % 2 == 0){
		count = 0;
		while (num % 2 == 0){
			count += 1;
			num /= 2;
      }
		ret *= count;
  }
	for(int i = 0;i < MAXN;i++){
  if(prime[i]){
    int count = 1;
		while (num % x == 0){
			count += 1;
			num /= x;
      }
		ret *= count;
		if (num == 1)
			return ret;
  }
  }
	return ret;
  }

求一堆数有几个因子的模板

void chu()
{
    int i,j;
    for(i=1;i<maxn;i++)
    {
        ps[i]=1;
    }
    for(i=2;i<maxn;i++)
    {
        for(j=1;j*i<maxn;j++)
        {
            ps[i*j]++;
        }
    }
}

4、预处理每个数所有的质因数

#include<cstdio>
#include<vector>
using namespace std;
const int N = 100000 + 5;
vector<int > prime_factor[N];
void init(){
    for(int i = 2; i < N; i ++){
        if(prime_factor[i].size() == 0){//如果i是质数 
            for(int j = i; j < N; j += i){
                prime_factor[j].push_back(i); 
            }
        }
    }
}
int main(){
    init();
}

4、预处理每个数所有的因数

#include<cstdio>
#include<vector>
using namespace std;
const int N = 100000 + 5;
vector<int > factor[N];
void init(){
    for(int i = 2; i < N; i ++){ 
        for(int j = i; j < N; j += i){
            factor[j].push_back(i); 
        }
    }
}
int main(){
    init();
}

5、预处理每个数的质因数分解

#include<cstdio>
#include<vector>
using namespace std;
const int N = 100000 + 5;
vector<int > prime_factor[N];
void init(){
    int temp;
    for(int i = 2; i < N; i ++){
        if(prime_factor[i].size() == 0){
            for(int j = i; j < N; j += i){
                temp = j;
                while(temp % i == 0){
                    prime_factor[j].push_back(i);
                    temp /= i;
                }  
            }
        }
    }
}
int main(){
    init();
}
